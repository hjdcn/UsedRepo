package thread;


//class HJ implements Runnable{
//	public void run(){
//		System.out.println("子线程开始执行！");
//		try {
//			Thread.sleep(10000);
//		} catch (InterruptedException e) {
//			System.out.println("子线程被主线程终止！");
//			return ;
//		}
//		    System.out.println("子线程正常终止！");
//	}
//	/*
//	 * 两个线程同时开始执行
//	 */
//	public static void main(String []args)
//	{
//		HJ test = new HJ();
//		Thread t= new Thread(test,"子线程");
//		t.start();
//		try{
//			Thread.sleep(2000);//这个线程是父线程，每次都要用Thread表示线程
//		}catch(Exception e){
//			e.printStackTrace();
//		}
//		t.interrupt();
//		
//	}
//}


//class HJ implements Runnable {
//    public void run() {
//        while (true) {
//            System.out.println(Thread.currentThread().getName() + "在运行");
//        }
//    }
// 
//    public static void main(String[] args) {
//        HJ he = new HJ();
//        Thread demo = new Thread(he, "线程");
//       // demo.setDaemon(true);
//        demo.start();
//    }
//}


//import java.io.IOException;   
//
//public class TestThread extends Thread {   
//       
//    public TestThread() {   
//    }   
//    /** *//**  
//     * 线程的run方法，它将和其他线程同时运行  
//     */  
//    public void run(){   
//        for(int i = 1; i <= 100; i++){   
//            try{   
//                Thread.sleep(100);   
//                   
//            } catch (InterruptedException ex){   
//                ex.printStackTrace();   
//            }   
//            System.out.println(i);   
//        }   
//    }   
//    public static void main(String [] args){   
//        TestThread test = new TestThread();   
//        // 如果不设置daemon，那么线程将输出100后才结束   
//        test.setDaemon(true);   
//        test.start();   
//        System.out.println("isDaemon = " + test.isDaemon());   
//        try {   
//            System.in.read(); // 接受输入，使程序在此停顿，一旦接收到用户输入，main线程结束，守护线程自动结束   .如果我不等他输出完100就输入，进程就马上结束
//        } catch (IOException ex) {   
//            ex.printStackTrace();   
//        }   
//    }   
//} 


class TestThread implements Runnable{
	public void run(){
		for(int i=1;i<=10;i++)
		{
			System.out.println(Thread.currentThread().getName()+"正在运行！");
			if(i==2)
			{
				System.out.println(Thread.currentThread().getName()+"进程礼让le！");
				Thread.yield();
			}
		}
	}
	
	public static void main(String []args){
		TestThread t= new TestThread();
		Thread tt= new Thread(t);
		TestThread t2= new TestThread();
		Thread tt2= new Thread(t2);
		tt.start();
		tt2.start();
	}
}